---
// src/pages/test.astro
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test API Connection - CodeIgniter + Astro</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen py-8">
    <div class="container mx-auto px-4">
        <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">
            🔗 Test API Connection
        </h1>
        <p class="text-center text-gray-600 mb-8">
            Prueba la conexión entre tu API de CodeIgniter y el frontend de Astro + React
        </p>
        
        <!-- Componente React -->
        <div id="test-connection-root"></div>
    </div>

    <!-- Script del componente React inline para evitar problemas de importación -->
    <script type="module">
        import React, { useState, useEffect } from 'https://esm.sh/react@19.1.0';
        import { createRoot } from 'https://esm.sh/react-dom@19.1.0/client';

        // Servicio API inline
        class ApiService {
            constructor() {
                this.baseURL = 'http://localhost:8080/api';
                this.token = null;
            }

            async request(endpoint, options = {}) {
                const url = `${this.baseURL}${endpoint}`;
                
                const config = {
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        ...options.headers,
                    },
                    ...options,
                };

                if (this.token) {
                    config.headers.Authorization = `Bearer ${this.token}`;
                }

                try {
                    const response = await fetch(url, config);
                    
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.message || `HTTP Error: ${response.status}`);
                    }

                    return await response.json();
                } catch (error) {
                    console.error('API Request Error:', error);
                    throw error;
                }
            }

            async login(email, password) {
                const response = await this.request('/login', {
                    method: 'POST',
                    body: JSON.stringify({ email, password }),
                });

                if (response.token) {
                    this.token = response.token;
                    localStorage.setItem('api_token', response.token);
                }

                return response;
            }

            logout() {
                this.token = null;
                localStorage.removeItem('api_token');
            }

            loadToken() {
                const savedToken = localStorage.getItem('api_token');
                if (savedToken) {
                    this.token = savedToken;
                }
                return savedToken;
            }

            async testConnection() {
                return await this.request('/test');
            }

            async testProtected() {
                return await this.request('/test/protected');
            }

            async getUsers() {
                return await this.request('/users');
            }
        }

        const apiService = new ApiService();

        // Componente React
        function TestConnection() {
            const [status, setStatus] = useState('idle');
            const [result, setResult] = useState(null);
            const [error, setError] = useState(null);
            const [isLoggedIn, setIsLoggedIn] = useState(false);
            const [loginForm, setLoginForm] = useState({ email: '', password: '' });
            const [tests, setTests] = useState([]);

            useEffect(() => {
                const token = apiService.loadToken();
                setIsLoggedIn(!!token);
            }, []);

            const addTestResult = (testName, success, data) => {
                const testResult = {
                    id: Date.now(),
                    name: testName,
                    success,
                    data,
                    timestamp: new Date().toLocaleTimeString()
                };
                setTests(prev => [testResult, ...prev.slice(0, 4)]);
            };

            const testBasicConnection = async () => {
                setStatus('testing');
                setError(null);
                
                try {
                    const response = await apiService.testConnection();
                    setResult(response);
                    setStatus('success');
                    addTestResult('Basic Connection', true, response);
                } catch (err) {
                    setError(err.message);
                    setStatus('error');
                    addTestResult('Basic Connection', false, err.message);
                }
            };

            const testProtectedEndpoint = async () => {
                setStatus('testing');
                setError(null);
                
                try {
                    const response = await apiService.testProtected();
                    setResult(response);
                    setStatus('success');
                    addTestResult('Protected Endpoint', true, response);
                } catch (err) {
                    setError(err.message);
                    setStatus('error');
                    addTestResult('Protected Endpoint', false, err.message);
                }
            };

            const handleLogin = async (e) => {
                e.preventDefault();
                setStatus('testing');
                setError(null);
                
                try {
                    const response = await apiService.login(loginForm.email, loginForm.password);
                    setResult(response);
                    setStatus('success');
                    setIsLoggedIn(true);
                    addTestResult('Login', true, 'Login successful');
                } catch (err) {
                    setError(err.message);
                    setStatus('error');
                    addTestResult('Login', false, err.message);
                }
            };

            const handleLogout = () => {
                apiService.logout();
                setIsLoggedIn(false);
                setResult(null);
                setStatus('idle');
                addTestResult('Logout', true, 'Logged out successfully');
            };

            const getUsers = async () => {
                setStatus('testing');
                setError(null);
                
                try {
                    const response = await apiService.getUsers();
                    setResult(response);
                    setStatus('success');
                    addTestResult('Get Users', true, `Found ${response.length} users`);
                } catch (err) {
                    setError(err.message);
                    setStatus('error');
                    addTestResult('Get Users', false, err.message);
                }
            };

            return React.createElement('div', { className: 'max-w-6xl mx-auto' },
                // Header con estado
                React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },
                    React.createElement('h2', { className: 'text-2xl font-bold mb-4 text-gray-800' }, '🔌 API Connection Status'),
                    React.createElement('div', { className: 'flex items-center gap-4' },
                        React.createElement('div', { className: 'flex items-center gap-2' },
                            React.createElement('div', { 
                                className: `w-4 h-4 rounded-full ${
                                    status === 'success' ? 'bg-green-500' : 
                                    status === 'error' ? 'bg-red-500' : 
                                    status === 'testing' ? 'bg-yellow-500 animate-pulse' : 'bg-gray-300'
                                }`
                            }),
                            React.createElement('span', { className: 'font-semibold capitalize' }, status)
                        ),
                        React.createElement('div', { className: 'flex items-center gap-2' },
                            React.createElement('span', { className: isLoggedIn ? 'text-green-600' : 'text-red-600' },
                                isLoggedIn ? '🔓 Authenticated' : '🔒 Not authenticated'
                            )
                        )
                    )
                ),

                // Dos columnas principales
                React.createElement('div', { className: 'grid grid-cols-1 lg:grid-cols-2 gap-6' },
                    // Columna izquierda - Controles
                    React.createElement('div', { className: 'space-y-6' },
                        // Login form
                        !isLoggedIn && React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },
                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '🔑 Login'),
                            React.createElement('form', { onSubmit: handleLogin, className: 'space-y-4' },
                                React.createElement('input', {
                                    type: 'email',
                                    placeholder: 'Email',
                                    value: loginForm.email,
                                    onChange: (e) => setLoginForm({...loginForm, email: e.target.value}),
                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',
                                    required: true
                                }),
                                React.createElement('input', {
                                    type: 'password',
                                    placeholder: 'Password',
                                    value: loginForm.password,
                                    onChange: (e) => setLoginForm({...loginForm, password: e.target.value}),
                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',
                                    required: true
                                }),
                                React.createElement('button', {
                                    type: 'submit',
                                    disabled: status === 'testing',
                                    className: 'w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'
                                }, status === 'testing' ? 'Logging in...' : 'Login')
                            )
                        ),

                        // Logout button
                        isLoggedIn && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },
                            React.createElement('div', { className: 'flex justify-between items-center' },
                                React.createElement('span', { className: 'text-green-700 font-semibold' }, '✅ Authenticated'),
                                React.createElement('button', {
                                    onClick: handleLogout,
                                    className: 'bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors'
                                }, 'Logout')
                            )
                        ),

                        // Test buttons
                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },
                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '🧪 API Tests'),
                            React.createElement('div', { className: 'grid grid-cols-1 gap-3' },
                                React.createElement('button', {
                                    onClick: testBasicConnection,
                                    disabled: status === 'testing',
                                    className: 'bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'
                                }, '🌐 Test Basic Connection'),
                                
                                React.createElement('button', {
                                    onClick: testProtectedEndpoint,
                                    disabled: status === 'testing' || !isLoggedIn,
                                    className: 'bg-green-500 text-white py-3 px-4 rounded-lg hover:bg-green-600 disabled:opacity-50 transition-colors'
                                }, '🔐 Test Protected Endpoint'),

                                React.createElement('button', {
                                    onClick: getUsers,
                                    disabled: status === 'testing' || !isLoggedIn,
                                    className: 'bg-purple-500 text-white py-3 px-4 rounded-lg hover:bg-purple-600 disabled:opacity-50 transition-colors'
                                }, '👥 Get Users')
                            )
                        )
                    ),

                    // Columna derecha - Resultados
                    React.createElement('div', { className: 'space-y-6' },
                        // Resultado actual
                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },
                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '📊 Current Result'),
                            result && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },
                                React.createElement('pre', { className: 'text-sm text-green-700 whitespace-pre-wrap overflow-x-auto' },
                                    JSON.stringify(result, null, 2)
                                )
                            ),
                            error && React.createElement('div', { className: 'bg-red-50 border border-red-200 rounded-lg p-4' },
                                React.createElement('p', { className: 'text-red-700 font-semibold' }, 'Error:'),
                                React.createElement('p', { className: 'text-red-600 text-sm mt-1' }, error)
                            ),
                            !result && !error && React.createElement('p', { className: 'text-gray-500 italic' }, 'No test results yet...')
                        ),

                        // Historial de pruebas
                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },
                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '📝 Test History'),
                            tests.length === 0 && React.createElement('p', { className: 'text-gray-500 italic' }, 'No tests run yet...'),
                            React.createElement('div', { className: 'space-y-2' },
                                tests.map(test => 
                                    React.createElement('div', { 
                                        key: test.id,
                                        className: `flex items-center justify-between p-3 rounded-lg ${
                                            test.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                                        }`
                                    },
                                        React.createElement('div', { className: 'flex items-center gap-2' },
                                            React.createElement('span', null, test.success ? '✅' : '❌'),
                                            React.createElement('span', { className: 'font-semibold' }, test.name)
                                        ),
                                        React.createElement('span', { className: 'text-xs text-gray-500' }, test.timestamp)
                                    )
                                )
                            )
                        )
                    )
                ),

                // Loading overlay
                status === 'testing' && React.createElement('div', { 
                    className: 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50' 
                },
                    React.createElement('div', { className: 'bg-white rounded-lg p-6 flex items-center gap-4' },
                        React.createElement('div', { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500' }),
                        React.createElement('span', { className: 'text-lg' }, 'Testing connection...')
                    )
                )
            );
        }

        // Renderizar el componente
        const root = createRoot(document.getElementById('test-connection-root'));
        root.render(React.createElement(TestConnection));
    </script>
</body>
</html>
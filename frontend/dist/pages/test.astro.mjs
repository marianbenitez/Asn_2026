import { c as createComponent, e as createAstro, b as renderTemplate, f as renderHead, a as renderScript } from '../chunks/astro/server_9gGvyqx6.mjs';
import 'kleur/colors';
import 'html-escaper';
import 'clsx';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$Test = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Test;
  return renderTemplate(_a || (_a = __template(['<html lang="es"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Test API Connection - CodeIgniter + Astro</title>', "", "</head> <body class=\"bg-gray-100 min-h-screen py-8\"> <div class=\"container mx-auto px-4\"> <h1 class=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n\u{1F517} Test API Connection\n</h1> <p class=\"text-center text-gray-600 mb-8\">\nPrueba la conexi\xF3n entre tu API de CodeIgniter y el frontend de Astro + React\n</p> <!-- Componente React --> <div id=\"test-connection-root\"></div> </div> <!-- Script del componente React inline para evitar problemas de importaci\xF3n --> <script type=\"module\">\n        import React, { useState, useEffect } from 'https://esm.sh/react@19.1.0';\n        import { createRoot } from 'https://esm.sh/react-dom@19.1.0/client';\n\n        // Servicio API inline\n        class ApiService {\n            constructor() {\n                this.baseURL = 'http://localhost:8080/api';\n                this.token = null;\n            }\n\n            async request(endpoint, options = {}) {\n                const url = `${this.baseURL}${endpoint}`;\n                \n                const config = {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        ...options.headers,\n                    },\n                    ...options,\n                };\n\n                if (this.token) {\n                    config.headers.Authorization = `Bearer ${this.token}`;\n                }\n\n                try {\n                    const response = await fetch(url, config);\n                    \n                    if (!response.ok) {\n                        const errorData = await response.json().catch(() => ({}));\n                        throw new Error(errorData.message || `HTTP Error: ${response.status}`);\n                    }\n\n                    return await response.json();\n                } catch (error) {\n                    console.error('API Request Error:', error);\n                    throw error;\n                }\n            }\n\n            async login(email, password) {\n                const response = await this.request('/login', {\n                    method: 'POST',\n                    body: JSON.stringify({ email, password }),\n                });\n\n                if (response.token) {\n                    this.token = response.token;\n                    localStorage.setItem('api_token', response.token);\n                }\n\n                return response;\n            }\n\n            logout() {\n                this.token = null;\n                localStorage.removeItem('api_token');\n            }\n\n            loadToken() {\n                const savedToken = localStorage.getItem('api_token');\n                if (savedToken) {\n                    this.token = savedToken;\n                }\n                return savedToken;\n            }\n\n            async testConnection() {\n                return await this.request('/test');\n            }\n\n            async testProtected() {\n                return await this.request('/test/protected');\n            }\n\n            async getUsers() {\n                return await this.request('/users');\n            }\n        }\n\n        const apiService = new ApiService();\n\n        // Componente React\n        function TestConnection() {\n            const [status, setStatus] = useState('idle');\n            const [result, setResult] = useState(null);\n            const [error, setError] = useState(null);\n            const [isLoggedIn, setIsLoggedIn] = useState(false);\n            const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n            const [tests, setTests] = useState([]);\n\n            useEffect(() => {\n                const token = apiService.loadToken();\n                setIsLoggedIn(!!token);\n            }, []);\n\n            const addTestResult = (testName, success, data) => {\n                const testResult = {\n                    id: Date.now(),\n                    name: testName,\n                    success,\n                    data,\n                    timestamp: new Date().toLocaleTimeString()\n                };\n                setTests(prev => [testResult, ...prev.slice(0, 4)]);\n            };\n\n            const testBasicConnection = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.testConnection();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Basic Connection', true, response);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Basic Connection', false, err.message);\n                }\n            };\n\n            const testProtectedEndpoint = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.testProtected();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Protected Endpoint', true, response);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Protected Endpoint', false, err.message);\n                }\n            };\n\n            const handleLogin = async (e) => {\n                e.preventDefault();\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.login(loginForm.email, loginForm.password);\n                    setResult(response);\n                    setStatus('success');\n                    setIsLoggedIn(true);\n                    addTestResult('Login', true, 'Login successful');\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Login', false, err.message);\n                }\n            };\n\n            const handleLogout = () => {\n                apiService.logout();\n                setIsLoggedIn(false);\n                setResult(null);\n                setStatus('idle');\n                addTestResult('Logout', true, 'Logged out successfully');\n            };\n\n            const getUsers = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.getUsers();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Get Users', true, `Found ${response.length} users`);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Get Users', false, err.message);\n                }\n            };\n\n            return React.createElement('div', { className: 'max-w-6xl mx-auto' },\n                // Header con estado\n                React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },\n                    React.createElement('h2', { className: 'text-2xl font-bold mb-4 text-gray-800' }, '\u{1F50C} API Connection Status'),\n                    React.createElement('div', { className: 'flex items-center gap-4' },\n                        React.createElement('div', { className: 'flex items-center gap-2' },\n                            React.createElement('div', { \n                                className: `w-4 h-4 rounded-full ${\n                                    status === 'success' ? 'bg-green-500' : \n                                    status === 'error' ? 'bg-red-500' : \n                                    status === 'testing' ? 'bg-yellow-500 animate-pulse' : 'bg-gray-300'\n                                }`\n                            }),\n                            React.createElement('span', { className: 'font-semibold capitalize' }, status)\n                        ),\n                        React.createElement('div', { className: 'flex items-center gap-2' },\n                            React.createElement('span', { className: isLoggedIn ? 'text-green-600' : 'text-red-600' },\n                                isLoggedIn ? '\u{1F513} Authenticated' : '\u{1F512} Not authenticated'\n                            )\n                        )\n                    )\n                ),\n\n                // Dos columnas principales\n                React.createElement('div', { className: 'grid grid-cols-1 lg:grid-cols-2 gap-6' },\n                    // Columna izquierda - Controles\n                    React.createElement('div', { className: 'space-y-6' },\n                        // Login form\n                        !isLoggedIn && React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F511} Login'),\n                            React.createElement('form', { onSubmit: handleLogin, className: 'space-y-4' },\n                                React.createElement('input', {\n                                    type: 'email',\n                                    placeholder: 'Email',\n                                    value: loginForm.email,\n                                    onChange: (e) => setLoginForm({...loginForm, email: e.target.value}),\n                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',\n                                    required: true\n                                }),\n                                React.createElement('input', {\n                                    type: 'password',\n                                    placeholder: 'Password',\n                                    value: loginForm.password,\n                                    onChange: (e) => setLoginForm({...loginForm, password: e.target.value}),\n                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',\n                                    required: true\n                                }),\n                                React.createElement('button', {\n                                    type: 'submit',\n                                    disabled: status === 'testing',\n                                    className: 'w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'\n                                }, status === 'testing' ? 'Logging in...' : 'Login')\n                            )\n                        ),\n\n                        // Logout button\n                        isLoggedIn && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },\n                            React.createElement('div', { className: 'flex justify-between items-center' },\n                                React.createElement('span', { className: 'text-green-700 font-semibold' }, '\u2705 Authenticated'),\n                                React.createElement('button', {\n                                    onClick: handleLogout,\n                                    className: 'bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors'\n                                }, 'Logout')\n                            )\n                        ),\n\n                        // Test buttons\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F9EA} API Tests'),\n                            React.createElement('div', { className: 'grid grid-cols-1 gap-3' },\n                                React.createElement('button', {\n                                    onClick: testBasicConnection,\n                                    disabled: status === 'testing',\n                                    className: 'bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F310} Test Basic Connection'),\n                                \n                                React.createElement('button', {\n                                    onClick: testProtectedEndpoint,\n                                    disabled: status === 'testing' || !isLoggedIn,\n                                    className: 'bg-green-500 text-white py-3 px-4 rounded-lg hover:bg-green-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F510} Test Protected Endpoint'),\n\n                                React.createElement('button', {\n                                    onClick: getUsers,\n                                    disabled: status === 'testing' || !isLoggedIn,\n                                    className: 'bg-purple-500 text-white py-3 px-4 rounded-lg hover:bg-purple-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F465} Get Users')\n                            )\n                        )\n                    ),\n\n                    // Columna derecha - Resultados\n                    React.createElement('div', { className: 'space-y-6' },\n                        // Resultado actual\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F4CA} Current Result'),\n                            result && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },\n                                React.createElement('pre', { className: 'text-sm text-green-700 whitespace-pre-wrap overflow-x-auto' },\n                                    JSON.stringify(result, null, 2)\n                                )\n                            ),\n                            error && React.createElement('div', { className: 'bg-red-50 border border-red-200 rounded-lg p-4' },\n                                React.createElement('p', { className: 'text-red-700 font-semibold' }, 'Error:'),\n                                React.createElement('p', { className: 'text-red-600 text-sm mt-1' }, error)\n                            ),\n                            !result && !error && React.createElement('p', { className: 'text-gray-500 italic' }, 'No test results yet...')\n                        ),\n\n                        // Historial de pruebas\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F4DD} Test History'),\n                            tests.length === 0 && React.createElement('p', { className: 'text-gray-500 italic' }, 'No tests run yet...'),\n                            React.createElement('div', { className: 'space-y-2' },\n                                tests.map(test => \n                                    React.createElement('div', { \n                                        key: test.id,\n                                        className: `flex items-center justify-between p-3 rounded-lg ${\n                                            test.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n                                        }`\n                                    },\n                                        React.createElement('div', { className: 'flex items-center gap-2' },\n                                            React.createElement('span', null, test.success ? '\u2705' : '\u274C'),\n                                            React.createElement('span', { className: 'font-semibold' }, test.name)\n                                        ),\n                                        React.createElement('span', { className: 'text-xs text-gray-500' }, test.timestamp)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                ),\n\n                // Loading overlay\n                status === 'testing' && React.createElement('div', { \n                    className: 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50' \n                },\n                    React.createElement('div', { className: 'bg-white rounded-lg p-6 flex items-center gap-4' },\n                        React.createElement('div', { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500' }),\n                        React.createElement('span', { className: 'text-lg' }, 'Testing connection...')\n                    )\n                )\n            );\n        }\n\n        // Renderizar el componente\n        const root = createRoot(document.getElementById('test-connection-root'));\n        root.render(React.createElement(TestConnection));\n    <\/script> </body> </html>"], ['<html lang="es"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Test API Connection - CodeIgniter + Astro</title>', "", "</head> <body class=\"bg-gray-100 min-h-screen py-8\"> <div class=\"container mx-auto px-4\"> <h1 class=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n\u{1F517} Test API Connection\n</h1> <p class=\"text-center text-gray-600 mb-8\">\nPrueba la conexi\xF3n entre tu API de CodeIgniter y el frontend de Astro + React\n</p> <!-- Componente React --> <div id=\"test-connection-root\"></div> </div> <!-- Script del componente React inline para evitar problemas de importaci\xF3n --> <script type=\"module\">\n        import React, { useState, useEffect } from 'https://esm.sh/react@19.1.0';\n        import { createRoot } from 'https://esm.sh/react-dom@19.1.0/client';\n\n        // Servicio API inline\n        class ApiService {\n            constructor() {\n                this.baseURL = 'http://localhost:8080/api';\n                this.token = null;\n            }\n\n            async request(endpoint, options = {}) {\n                const url = \\`\\${this.baseURL}\\${endpoint}\\`;\n                \n                const config = {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        ...options.headers,\n                    },\n                    ...options,\n                };\n\n                if (this.token) {\n                    config.headers.Authorization = \\`Bearer \\${this.token}\\`;\n                }\n\n                try {\n                    const response = await fetch(url, config);\n                    \n                    if (!response.ok) {\n                        const errorData = await response.json().catch(() => ({}));\n                        throw new Error(errorData.message || \\`HTTP Error: \\${response.status}\\`);\n                    }\n\n                    return await response.json();\n                } catch (error) {\n                    console.error('API Request Error:', error);\n                    throw error;\n                }\n            }\n\n            async login(email, password) {\n                const response = await this.request('/login', {\n                    method: 'POST',\n                    body: JSON.stringify({ email, password }),\n                });\n\n                if (response.token) {\n                    this.token = response.token;\n                    localStorage.setItem('api_token', response.token);\n                }\n\n                return response;\n            }\n\n            logout() {\n                this.token = null;\n                localStorage.removeItem('api_token');\n            }\n\n            loadToken() {\n                const savedToken = localStorage.getItem('api_token');\n                if (savedToken) {\n                    this.token = savedToken;\n                }\n                return savedToken;\n            }\n\n            async testConnection() {\n                return await this.request('/test');\n            }\n\n            async testProtected() {\n                return await this.request('/test/protected');\n            }\n\n            async getUsers() {\n                return await this.request('/users');\n            }\n        }\n\n        const apiService = new ApiService();\n\n        // Componente React\n        function TestConnection() {\n            const [status, setStatus] = useState('idle');\n            const [result, setResult] = useState(null);\n            const [error, setError] = useState(null);\n            const [isLoggedIn, setIsLoggedIn] = useState(false);\n            const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n            const [tests, setTests] = useState([]);\n\n            useEffect(() => {\n                const token = apiService.loadToken();\n                setIsLoggedIn(!!token);\n            }, []);\n\n            const addTestResult = (testName, success, data) => {\n                const testResult = {\n                    id: Date.now(),\n                    name: testName,\n                    success,\n                    data,\n                    timestamp: new Date().toLocaleTimeString()\n                };\n                setTests(prev => [testResult, ...prev.slice(0, 4)]);\n            };\n\n            const testBasicConnection = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.testConnection();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Basic Connection', true, response);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Basic Connection', false, err.message);\n                }\n            };\n\n            const testProtectedEndpoint = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.testProtected();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Protected Endpoint', true, response);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Protected Endpoint', false, err.message);\n                }\n            };\n\n            const handleLogin = async (e) => {\n                e.preventDefault();\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.login(loginForm.email, loginForm.password);\n                    setResult(response);\n                    setStatus('success');\n                    setIsLoggedIn(true);\n                    addTestResult('Login', true, 'Login successful');\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Login', false, err.message);\n                }\n            };\n\n            const handleLogout = () => {\n                apiService.logout();\n                setIsLoggedIn(false);\n                setResult(null);\n                setStatus('idle');\n                addTestResult('Logout', true, 'Logged out successfully');\n            };\n\n            const getUsers = async () => {\n                setStatus('testing');\n                setError(null);\n                \n                try {\n                    const response = await apiService.getUsers();\n                    setResult(response);\n                    setStatus('success');\n                    addTestResult('Get Users', true, \\`Found \\${response.length} users\\`);\n                } catch (err) {\n                    setError(err.message);\n                    setStatus('error');\n                    addTestResult('Get Users', false, err.message);\n                }\n            };\n\n            return React.createElement('div', { className: 'max-w-6xl mx-auto' },\n                // Header con estado\n                React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6 mb-6' },\n                    React.createElement('h2', { className: 'text-2xl font-bold mb-4 text-gray-800' }, '\u{1F50C} API Connection Status'),\n                    React.createElement('div', { className: 'flex items-center gap-4' },\n                        React.createElement('div', { className: 'flex items-center gap-2' },\n                            React.createElement('div', { \n                                className: \\`w-4 h-4 rounded-full \\${\n                                    status === 'success' ? 'bg-green-500' : \n                                    status === 'error' ? 'bg-red-500' : \n                                    status === 'testing' ? 'bg-yellow-500 animate-pulse' : 'bg-gray-300'\n                                }\\`\n                            }),\n                            React.createElement('span', { className: 'font-semibold capitalize' }, status)\n                        ),\n                        React.createElement('div', { className: 'flex items-center gap-2' },\n                            React.createElement('span', { className: isLoggedIn ? 'text-green-600' : 'text-red-600' },\n                                isLoggedIn ? '\u{1F513} Authenticated' : '\u{1F512} Not authenticated'\n                            )\n                        )\n                    )\n                ),\n\n                // Dos columnas principales\n                React.createElement('div', { className: 'grid grid-cols-1 lg:grid-cols-2 gap-6' },\n                    // Columna izquierda - Controles\n                    React.createElement('div', { className: 'space-y-6' },\n                        // Login form\n                        !isLoggedIn && React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F511} Login'),\n                            React.createElement('form', { onSubmit: handleLogin, className: 'space-y-4' },\n                                React.createElement('input', {\n                                    type: 'email',\n                                    placeholder: 'Email',\n                                    value: loginForm.email,\n                                    onChange: (e) => setLoginForm({...loginForm, email: e.target.value}),\n                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',\n                                    required: true\n                                }),\n                                React.createElement('input', {\n                                    type: 'password',\n                                    placeholder: 'Password',\n                                    value: loginForm.password,\n                                    onChange: (e) => setLoginForm({...loginForm, password: e.target.value}),\n                                    className: 'w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500',\n                                    required: true\n                                }),\n                                React.createElement('button', {\n                                    type: 'submit',\n                                    disabled: status === 'testing',\n                                    className: 'w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'\n                                }, status === 'testing' ? 'Logging in...' : 'Login')\n                            )\n                        ),\n\n                        // Logout button\n                        isLoggedIn && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },\n                            React.createElement('div', { className: 'flex justify-between items-center' },\n                                React.createElement('span', { className: 'text-green-700 font-semibold' }, '\u2705 Authenticated'),\n                                React.createElement('button', {\n                                    onClick: handleLogout,\n                                    className: 'bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors'\n                                }, 'Logout')\n                            )\n                        ),\n\n                        // Test buttons\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F9EA} API Tests'),\n                            React.createElement('div', { className: 'grid grid-cols-1 gap-3' },\n                                React.createElement('button', {\n                                    onClick: testBasicConnection,\n                                    disabled: status === 'testing',\n                                    className: 'bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F310} Test Basic Connection'),\n                                \n                                React.createElement('button', {\n                                    onClick: testProtectedEndpoint,\n                                    disabled: status === 'testing' || !isLoggedIn,\n                                    className: 'bg-green-500 text-white py-3 px-4 rounded-lg hover:bg-green-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F510} Test Protected Endpoint'),\n\n                                React.createElement('button', {\n                                    onClick: getUsers,\n                                    disabled: status === 'testing' || !isLoggedIn,\n                                    className: 'bg-purple-500 text-white py-3 px-4 rounded-lg hover:bg-purple-600 disabled:opacity-50 transition-colors'\n                                }, '\u{1F465} Get Users')\n                            )\n                        )\n                    ),\n\n                    // Columna derecha - Resultados\n                    React.createElement('div', { className: 'space-y-6' },\n                        // Resultado actual\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F4CA} Current Result'),\n                            result && React.createElement('div', { className: 'bg-green-50 border border-green-200 rounded-lg p-4' },\n                                React.createElement('pre', { className: 'text-sm text-green-700 whitespace-pre-wrap overflow-x-auto' },\n                                    JSON.stringify(result, null, 2)\n                                )\n                            ),\n                            error && React.createElement('div', { className: 'bg-red-50 border border-red-200 rounded-lg p-4' },\n                                React.createElement('p', { className: 'text-red-700 font-semibold' }, 'Error:'),\n                                React.createElement('p', { className: 'text-red-600 text-sm mt-1' }, error)\n                            ),\n                            !result && !error && React.createElement('p', { className: 'text-gray-500 italic' }, 'No test results yet...')\n                        ),\n\n                        // Historial de pruebas\n                        React.createElement('div', { className: 'bg-white rounded-lg shadow-lg p-6' },\n                            React.createElement('h3', { className: 'text-lg font-semibold mb-4' }, '\u{1F4DD} Test History'),\n                            tests.length === 0 && React.createElement('p', { className: 'text-gray-500 italic' }, 'No tests run yet...'),\n                            React.createElement('div', { className: 'space-y-2' },\n                                tests.map(test => \n                                    React.createElement('div', { \n                                        key: test.id,\n                                        className: \\`flex items-center justify-between p-3 rounded-lg \\${\n                                            test.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n                                        }\\`\n                                    },\n                                        React.createElement('div', { className: 'flex items-center gap-2' },\n                                            React.createElement('span', null, test.success ? '\u2705' : '\u274C'),\n                                            React.createElement('span', { className: 'font-semibold' }, test.name)\n                                        ),\n                                        React.createElement('span', { className: 'text-xs text-gray-500' }, test.timestamp)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                ),\n\n                // Loading overlay\n                status === 'testing' && React.createElement('div', { \n                    className: 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50' \n                },\n                    React.createElement('div', { className: 'bg-white rounded-lg p-6 flex items-center gap-4' },\n                        React.createElement('div', { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500' }),\n                        React.createElement('span', { className: 'text-lg' }, 'Testing connection...')\n                    )\n                )\n            );\n        }\n\n        // Renderizar el componente\n        const root = createRoot(document.getElementById('test-connection-root'));\n        root.render(React.createElement(TestConnection));\n    <\/script> </body> </html>"])), renderScript($$result, "C:/laragon/www/Asociacion/Front_asn/src/pages/test.astro?astro&type=script&index=0&lang.ts"), renderHead());
}, "C:/laragon/www/Asociacion/Front_asn/src/pages/test.astro", void 0);

const $$file = "C:/laragon/www/Asociacion/Front_asn/src/pages/test.astro";
const $$url = "/test";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$Test,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
